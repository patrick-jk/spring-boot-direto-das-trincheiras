openapi: 3.0.1
info:
  title: DevDojo Anime Service API
  version: v1
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /v1/producers:
    get:
      tags:
        - producer-controller
      operationId: findAllProducers
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProducerGetResponse'
      security:
        - basicAuth: [ ]
    put:
      tags:
        - producer-controller
      operationId: updateProducer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPutRequest'
        required: true
      responses:
        '200':
          description: OK
      security:
        - basicAuth: [ ]
    post:
      tags:
        - producer-controller
      operationId: saveProducer
      parameters:
        - name: x-api-key
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerPostRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProducerPostResponse'
      security:
        - basicAuth: [ ]
  /v1/animes:
    get:
      tags:
        - anime-controller
      summary: Get all animes
      description: Get all animes available in the system
      operationId: findAllAnimes
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List all animes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimeGetResponse'
      security:
        - basicAuth: [ ]
    put:
      tags:
        - anime-controller
      operationId: updateAnime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimePutRequest'
        required: true
      responses:
        '200':
          description: OK
      security:
        - basicAuth: [ ]
    post:
      tags:
        - anime-controller
      operationId: saveAnime
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimePostRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AnimePostResponse'
      security:
        - basicAuth: [ ]
  /v1/producers/{id}:
    get:
      tags:
        - producer-controller
      operationId: findProducerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProducerGetResponse'
      security:
        - basicAuth: [ ]
    delete:
      tags:
        - producer-controller
      operationId: deleteProducerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
      security:
        - basicAuth: [ ]
  /v1/animes/{id}:
    get:
      tags:
        - anime-controller
      summary: Get anime by id
      operationId: findAnimeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get anime by its id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimeGetResponse'
        '404':
          description: Anime Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultErrorMessage'
      security:
        - basicAuth: [ ]
    delete:
      tags:
        - anime-controller
      operationId: deleteAnimeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
      security:
        - basicAuth: [ ]
  /v1/animes/paginated:
    get:
      tags:
        - anime-controller
      summary: Get all animes paginated
      description: Get all animes available in the system paginated
      operationId: findAllAnimesPaginated
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List all animes paginated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimeGetResponse'
      security:
        - basicAuth: [ ]
components:
  schemas:
    ProducerPutRequest:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    AnimePutRequest:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-field-extra-annotation: "@jakarta.validation.constraints.NotNull(message = \"The field 'id' cannot be null\")"
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message = \"The field 'name' is required\")"
    ProducerPostRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    ProducerPostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    AnimePostRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          x-field-extra-annotation: "@jakarta.validation.constraints.NotBlank(message=\"The field 'name' is required\")"
    AnimePostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ProducerGetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        createdAt:
          type: string
          format: date-time
    AnimeGetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Overlord
    DefaultErrorMessage:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
